- [x] Arreglado problema de Makefile (ft_strncmp.c, no estaba por lo que lo añadi).
- [x] He creado el recorrido del arbol para ejecutar los comandos.
- [ ] Crear una funcion para que sepa leer cada cada comando y ejecutar la funcion de cada una.
	- [ ] En esa funcion que sepa diferenciar el comando de las redirecciones.
	- [ ] Que diferencie y ejecute las pipes.
- [ ] Crear funcion que reemplace variables por sus valores y contemple el wildcard *.
- [x] He arreglado el problema del filtro de redundancia.
- [ ] Ver que hacer con el codigo que se ha quedado sin usar en clean_cmd.c y en otros .c
- [x] He implementado el uso de los CTRL.
- [ ] Comprobar que el uso de los CTRL sea como en el otriginal 100%.
- [ ] Crear sistema de historial funcional.
- [ ] Crear los diferentes comandos.




//////

- Reparar parentesis cutre
- Pasar norminette

- Expandir variables de entorno.
- Construir la ruta de cmd
- Probar la ejecución del comando con execve
- Controlar el exit code
*PA JODE: << "'asdas""


//////////////////////////////////////////
/////// FUNCIONES AUTORIZADAS ////////////
//////////////////////////////////////////

Function: void rl_clear_history (void)

	Clear the history list by deleting all of the entries, in the same manner as the History library’s clear_history() function. This differs from clear_history because it frees private data Readline saves in the history list.

Function: int rl_on_new_line (void)
	
	Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

Function: void rl_replace_line (const char *text, int clear_undo)

	Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. If clear_undo is non-zero, the undo list associated with the current line is cleared.

Function: void rl_redisplay (void)

	Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

Function: void add_history (char *string)

	Place string at the end of the history list. The associated data field (if any) is set to NULL.

Function:  pid_t wait3(int *status, int options, struct rusage *rusage)

	La  función  wait3  suspende  la ejecución del proceso actual hasta que finalice un hijo o
	hasta que se produzca una señal cuya acción sea finalizar el proceso actual o llamar a una
	función manejadora de señales. Si un hijo ha terminado ya cuando se realiza la llamada (lo
	que se conoce como  proceso  "zombie"),  la  función  regresa  inmediatamente.  Todos  los
	recursos del sistema utilizados por el hijo son liberados.

Function: pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage)

	La  función wait4 suspende la ejecución del proceso actual hasta que un hijo, especificado
	por el argumento pid, haya terminado o hasta que se produzca una  señal  cuya  acción  sea
	finalizar  el  proceso  actual  o  llamar a una función manejadora de señales.  Si el hijo
	especificado por pid ha terminado cuando se realiza la llamada  (lo  que  se  conoce  como
	proceso  "zombie"),  la  función  regresa  inmediatamente.  Todos los recursos del sistema
	utilizados por el hijo son liberados.

Function: int sigaction(int signum, const struct sigaction *restrict act, struct sigaction *restrict oldact)

	The sigaction() system call is used to change the action taken by
	a process on receipt of a specific signal.  (See signal(7) for an
	overview of signals.)

Function: char *getcwd(char *buffer, size_t size)

	Determines the path name of the working directory and stores it in buffer.

Function: int chdir(const char *path)

	chdir() changes the current working directory of the calling
    process to the directory specified in path.

Function: int stat(const char *restrict pathname, struct stat *restrict statbuf)
		  int fstat(int fd, struct stat *statbuf)
		  int lstat(const char *restrict pathname, struct stat *restrict statbuf)

	These functions return information about a file, in the buffer
	pointed to by statbuf.  No permissions are required on the file
	itself, but—in the case of stat(), fstatat(), and lstat()—execute
	(search) permission is required on all of the directories in
	pathname that lead to the file.

	stat() and fstatat() retrieve information about the file pointed
	to by pathname; the differences for fstatat() are described
	below.

	lstat() is identical to stat(), except that if pathname is a
	symbolic link, then it returns information about the link itself,
	not the file that the link refers to.

	fstat() is identical to stat(), except that the file about which
	information is to be retrieved is specified by the file
	descriptor fd.

Function: int unlink(const char *pathname)

	unlink() deletes a name from the filesystem.  If that name was
	the last link to a file and no processes have the file open, the
	file is deleted and the space it was using is made available for
	reuse.

	If the name was the last link to a file but any processes still
	have the file open, the file will remain in existence until the
	last file descriptor referring to it is closed.

	If the name referred to a symbolic link, the link is removed.

	If the name referred to a socket, FIFO, or device, the name for
	it is removed but processes which have the object open may
	continue to use it.

Function: DIR *opendir(const char *name)

	The opendir() function opens a directory stream corresponding to
	the directory name, and returns a pointer to the directory
	stream.  The stream is positioned at the first entry in the
	directory.

Function: int closedir(DIR *dirp)

	The closedir() function closes the directory stream associated
	with dirp.  A successful call to closedir() also closes the
	underlying file descriptor associated with dirp.  The directory
	stream descriptor dirp is not available after this call.

Function: struct dirent *readdir(DIR *dirp)

	The readdir() function returns a pointer to a dirent structure
	representing the next directory entry in the directory stream
	pointed to by dirp.  It returns NULL on reaching the end of the
	directory stream or if an error occurred.

Function: int isatty(int fd)

	The isatty() function tests whether fd is an open file descriptor
    referring to a terminal.

Function: char *ttyname(int fd)

	The function ttyname() returns a pointer to the null-terminated
	pathname of the terminal device that is open on the file
	descriptor fd, or NULL on error (for example, if fd is not
	connected to a terminal).  The return value may point to static
	data, possibly overwritten by the next call.

Function: int ttyslot(void)

	The legacy function ttyslot() returns the index of the current
    user's entry in some file. (consultar descripción completa para interpretar "some file")

Function: int ioctl(int fd, unsigned long request, ...)

	The ioctl() system call manipulates the underlying device
	parameters of special files.  In particular, many operating
	characteristics of character special files (e.g., terminals) may
	be controlled with ioctl() requests.  The argument fd must be an
	open file descriptor.

	The second argument is a device-dependent request code.  The
	third argument is an untyped pointer to memory.  It's
	traditionally char *argp (from the days before void * was valid
	C), and will be so named for this discussion.

	An ioctl() request has encoded in it whether the argument is an
	in parameter or out parameter, and the size of the argument argp
	in bytes.  Macros and defines used in specifying an ioctl()
	request are located in the file <sys/ioctl.h>.  See NOTES.

Function: char *getenv(const char *name)

	The getenv() function searches the environment list to find the
	environment variable name, and returns a pointer to the
	corresponding value string.

Function: int tcsetattr(int fildes, int optional_actions, const struct termios *termios_p)

	The tcsetattr() function shall set the parameters associated with
	the terminal referred to by the open file descriptor fildes (an
	open file descriptor associated with a terminal) from the termios
	structure referenced by termios_p...

Function: int tcgetattr(int fildes, struct termios *termios_p)

	The tcgetattr() function shall get the parameters associated with
	the terminal referred to by fildes and store them in the termios
	structure referenced by termios_p.  The fildes argument is an
	open file descriptor associated with a terminal.

	The termios_p argument is a pointer to a termios structure.

	The tcgetattr() operation is allowed from any process.

Function: int tgetent(char *bp, const char *name)
		  int tgetflag(const char *id);
          int tgetnum(const char *id);
          char *tgetstr(const char *id, char **area);
          char *tgoto(const char *cap, int col, int row);
       	  int tputs(const char *str, int affcnt, int (*putc)(int));

	These routines are included as a conversion aid for programs that
	use the termcap library.  Their parameters are the same, but the
	routines are emulated using the terminfo database.  Thus, they
	can only be used to query the capabilities of entries for which a
	terminfo entry has been compiled.

	Initialization
       The tgetent routine loads the entry for name.  It returns:

          1  on success,

          0  if there is no such entry (or that it is a generic type,
             having too little information for curses applications to
             run), and

          -1 if the terminfo database could not be found.

       This differs from the termcap library in two ways:

          •   The emulation ignores the buffer pointer bp.  The termcap
              library would store a copy of the terminal description in
              the area referenced by this pointer.  However, ncurses
              stores its terminal descriptions in compiled binary form,
              which is not the same thing.

          •   There is a difference in return codes.  The termcap
              library does not check if the terminal description is
              marked with the generic capability, or if the terminal
              description has cursor-addressing.

   Capability Values
       The tgetflag routine gets the boolean entry for id, or zero if it
       is not available.

       The tgetnum routine gets the numeric entry for id, or -1 if it is
       not available.

       The tgetstr routine returns the string entry for id, or zero if
       it is not available.  Use tputs to output the returned string.
       The area parameter is used as follows:

          •   It is assumed to be the address of a pointer to a buffer
              managed by the calling application.

          •   However, ncurses checks to ensure that area is not NULL,
              and also that the resulting buffer pointer is not NULL.
              If either check fails, the area parameter is ignored.

          •   If the checks succeed, ncurses also copies the return
              value to the buffer pointed to by area, and the area value
              will be updated to point past the null ending this value.

          •   The return value itself is an address in the terminal
              description which is loaded into memory.

       Only the first two characters of the id parameter of tgetflag,
       tgetnum and tgetstr are compared in lookups.

   Formatting Capabilities
       The tgoto routine expands the given capability using the
       parameters.

       •   Because the capability may have padding characters, the
           output of tgoto should be passed to tputs rather than some
           other output function such as printf(3).

       •   While tgoto is assumed to be used for the two-parameter
           cursor positioning capability, termcap applications also use
           it for single-parameter capabilities.

           Doing this shows a quirk in tgoto: most hardware terminals
           use cursor addressing with row first, but the original
           developers of the termcap interface chose to put the column
           parameter first.  The tgoto function swaps the order of
           parameters.  It does this also for calls requiring only a
           single parameter.  In that case, the first parameter is
           merely a placeholder.

       •   Normally the ncurses library is compiled with terminfo
           support.  In that case, tgoto uses tparm(3X) (a more capable
           formatter).

           However, tparm is not a termcap feature, and portable termcap
           applications should not rely upon its availability.

       The tputs routine is described on the curs_terminfo(3X) manual
       page.  It can retrieve capabilities by either termcap or terminfo
       name.

//// COMENTARIOS Y DESCARTES /////


- 	No hemos contemplado printf "#!hola" en bash, debido a que ! hace referncia a un comando previamente ejecutado,
	el ultimo del historial y lo repite.
		bash-3.2$ echo hola que tal
		hola que tal
		bash-3.2$ !echo
		echo hola que tal
		hola que tal
-

-	ERROR: "     echo    "'$PATH'"  "

HACER QUE FUNCIONE:
	- Arreglar variables sin usar
	- Arreglar warning (char)*q -> (char)**q
	- Crear la variable global en main.c y donde se vayan a usar declararla arriba pero con la palabra export delante
	- Error en ft_matrix_to_list.c en la funcion matrix_to_list -> se debe poner la lista = NULL para que la funcion lstadd_back sepa que es nula